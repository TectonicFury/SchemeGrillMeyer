(define (encode message tree)
  (if (null? message)
  '()
  (append (encode-symbol2 (car message) tree)
          (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (define (iter res branch-tree flag)
    (cond ((null? branch-tree) (error "bad tree: " tree))
          ((leaf? branch-tree)
            (begin (newline) (display branch-tree) (if (eq? (symbol-leaf branch-tree) symbol)
                res
                flag)))
          (else (append (iter (append res '(0)) (left-branch branch-tree) flag)
                        (iter (append res '(1)) (right-branch branch-tree) flag)))))
  (let ((res (iter '() tree '())))
       (if (null? res)
           (error "bad symbol: " symbol)
           res)))

(define (encode-symbol2 symbol tree)
  (define (iter res branch-tree flag)
    (cond ((null? branch-tree) (error "bad tree: " tree))
          ((leaf? branch-tree)
            (begin (newline) (display branch-tree)
              (if (eq? (symbol-leaf branch-tree) symbol)
                  res
                  flag)))
          (else (if (element-of-set? symbol (symbols (left-branch branch-tree)))
                    (iter (append res '(0)) (left-branch branch-tree) flag)
                    (iter (append res '(1)) (right-branch branch-tree) flag)))))
             (let ((res (iter '() tree '())))
                  (if (null? res)
                      (error "bad symbol: " symbol)
                      res)))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
