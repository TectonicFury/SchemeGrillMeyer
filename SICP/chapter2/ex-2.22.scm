(define (square-list-iter items)
  (define (sqr-lst-iter z result)
    (if (null? z)
        (cons result '())
        (sqr-lst-iter (cdr z) (cons result (* (car z) (car z))))
    )
  )
  (sqr-lst-iter (cdr items) (* (car items) (car items)))
)

(define (square-list items)
  (define (iter z result)
    (if (null? z)
        result
        (iter (cdr z) (cons (* (car z) (car z)) result))
    )
  )
  (iter (reverse items) '())
)
