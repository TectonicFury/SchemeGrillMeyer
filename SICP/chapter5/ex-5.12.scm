(define (machine-datapaths controller-text)
  (define (instruction-list)
    (define (iter new-insts insts)
      (if (null? insts)
          (reverse new-insts)
          (if (and (not (symbol? (car insts))) (not (find (car insts) new-insts)))
              (begin
                ;(display (car insts))
                (iter (cons (car insts) new-insts) (cdr insts)))
              (iter new-insts (cdr insts)))))
    ;(display "hi") (newline)
    ;(display controller-text)
    (iter '() controller-text))
    (define (dispatch message)
      (cond ((eq? message 'instruction-list) (instruction-list))
            (else (display "ERROR"))))
    dispatch)
(define (reverse items)
  (define (iter rev-items z)
    (if (null? z)
        rev-items
        (iter (cons (car z) rev-items) (cdr z))))
  (iter '() items))
(define (find obj items)
  (cond ((null? items) false)
        ((equal? obj (car items)) true)
        (else (find obj (cdr items)))))

;
(controller
(assign continue (label fib-done))
fib-loop
(test (op <) (reg n) (const 2))
(branch (label immediate-answer))
(save continue)
(assign continue (label afterfib-n-1))
(save n)
(assign n (op -) (reg n) (const 1))
(goto (label fib-loop))
afterfib-n-1
(restore n)
(restore continue)
(assign n (op -) (reg n) (const 2))
(save continue)
(assign continue (label afterfib-n-2))
(save val)
(goto (label fib-loop))
afterfib-n-2
(assign n (reg val))
(restore val)
(restore continue)
(assign val (op +) (reg val) (reg n))
(goto (reg continue))
immediate-answer
(assign val (reg n))
(goto (reg continue))
fib-done)
