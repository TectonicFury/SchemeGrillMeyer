(define (extract-registers controller-text)
  (let ((registers '()))
    (define (iter text)
      (if (null? text)
          registers
          (cond ((symbol? (car text)) (iter (cdr text)))
                ((eq? (caar text) 'assign)
                  (let ((r (cadr (car text)))
                        (assign-val-exp (cddr (car text))))
                    (if (not (memq r registers)) ; check if it is not already extracted
                        (begin
                          (set! registers (cons r registers))
                          (set! registers
                            (append (no-repeat-regs (find-regs assign-val-exp) registers) registers))
                          (iter (cdr text)))
                        (begin
                          (set! registers
                            (append (no-repeat-regs (find-regs assign-val-exp) registers) registers))
                          (iter (cdr text))))))
                ((eq? (caar text) 'goto)
                  (let ((dest (cadr (car text))))
                    (if (eq? (car dest) 'reg)
                        (let ((r (cadr dest)))
                          (if (not (memq r registers))
                              (begin
                                (set! registers (cons r registers))
                                (iter (cdr text)))
                              (iter (cdr text))))
                        (iter (cdr text)))))
                ((eq? (caar text) 'save)
                  (let ((r (cadr (car text))))
                    (if (not (memq r registers))
                        (begin
                          (set! registers (cons r registers))
                          (iter (cdr text)))
                        (iter (cdr text)))))
                ((eq? (caar text) 'restore)
                  (let ((r (cadr (car text))))
                    (if (not (memq r registers))
                        (begin
                          (set! registers (cons r registers))
                          (iter (cdr text)))
                        (iter (cdr text)))))
                (else (iter (cdr text))))))
    (iter controller-text)))

;
(define (no-repeat-regs sample pool)
  (define (iter2 s finals)
    (if (null? s)
        finals
        (if (not (memq (car s) pool))
            (iter2 (cdr s) (cons (car s) finals))
            (iter2 (cdr s) finals))))
  (iter2 sample '()))

(define (find-regs items)
  (define (iter regs z)
    (if (null? z)
        regs
        (if (eq? 'reg (caar z))
            (let ((reg-name (cadr (car z))))
              (iter (cons reg-name regs) (cdr z)))
            (iter regs (cdr z)))))
  (iter '() items))
; drudgery check on inchmeal
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops (list (list 'initialize-stack (lambda () (stack 'initialize)))))
          (register-table (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table (cons (list name (make-register name)) register-table)))
            'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                (display (car insts))
                (newline)
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
                (set-contents! pc the-instruction-sequence)
                (display "start!") (newline)
                (execute))
              ((eq? message 'install-instruction-sequence)
                (lambda (seq)
                  (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register)
                allocate-register)
              ((eq? message 'get-register)
                lookup-register)
              ((eq? message 'install-operations)
                (lambda (ops)
                  (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (error "Unknown request: MACHINE" message))))
      dispatch)))
