(define (fast-prime? n times count)
  (cond ((and (= times 0) (= count 0)) true)
        ((= times 0) (fast-prime? n 100 (- count 1)))
        ((fermat-test n) (fast-prime? n (- times 1) count))
        (else false)
  )
)

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))
  )
)

(define (fermat-test n)
  (define (try-it a) (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1))))
)

(define (timed-prime-test n) (newline)
(display n)
(start-prime-test n (runtime)))
(define (start-prime-test n start-time) (if (fast-prime? n 100 1000)
(report-prime (- (runtime) start-time)))) (define (report-prime elapsed-time)
(display " *** ") (display elapsed-time))

(define (three-primes-larger-than n)
  (define (three-primes-larger-aux m pcount)
    (cond ((even? m) (three-primes-larger-aux (+ m 1) pcount))
          ((and (fast-prime? m 100 1) (< pcount 3)) (timed-prime-test m) (three-primes-larger-aux (+ m 2) (+ pcount 1)))
          ((= pcount 3) (newline) (display "Done"))
          (else (three-primes-larger-aux (+ m 2) pcount))
    )
  )
(three-primes-larger-aux (+ n 1) 0))
