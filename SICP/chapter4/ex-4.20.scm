(define (letrec? exp) (tagged-list? exp 'letrec))
(define (letrec-inits exp) (cadr exp))
(define (letrec-vars exp) (map car (letrec-inits exp)))
(define (letrec-vals exp) (map cadr (letrec-inits exp)))
(define (letrec-body exp)
  (cddr exp))
(define (letrec->let exp)
  (let ((inits-unassigned (map (lambda (x) (list x '*unassigned*)) (letrec-vars exp))))
       (define (set-block vars vals)
         (if (null? vars)
             '()
             (cons (list 'set! (car vars) (car vals)) (set-block (cdr vars) (cdr vals)))))
    (append (list 'let) (list inits-unassigned) (set-block (letrec-vars exp) (letrec-vals exp)) (letrec-body exp))))
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))
